# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
for(i in set) {
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from Normal Distribution", freq = FALSE, main=sprintf("Histogram for Normal, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
# E
SRS <- 1000
set <- c(1, 2, 6, 10)
for(i in set) {
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from Normal Distribution", freq = FALSE, main=sprintf("Histogram for Normal, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
set <- c(1, 2, 6, 10)
for(i in set) {
attach(mtcars)
par(mfrow=c(1,2))
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
for(i in set) {
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from Normal Distribution", freq = FALSE, main=sprintf("Histogram for Normal, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
# E
set <- c(1, 2, 6, 10)
for(i in set) {
attach(mtcars)
par(mfrow=c(1,2))
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from Normal Distribution", freq = FALSE, main=sprintf("Histogram for Normal, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
# E
SRS <- 1000
set <- c(1, 5, 10, 20, 30, 40 ,50)
for(i in set) {
attach(mtcars)
par(mfrow=c(1,2))
n <- i
data.vec <- rexp(SRS*n,1/2) #creates the random data
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from exponential Distribution", freq = FALSE, main=sprintf("Histogram for exponential, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
# A
SRS <- 1000
set <- c(1, 2, 6, 10)
for(i in set) {
attach(mtcars)
par(mfrow=c(1,2))
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from Normal Distribution", freq = FALSE, main=sprintf("Histogram for Normal, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
# A
SRS <- 1000
set <- c(1, 2, 6, 10)
for(i in set) {
attach(mtcars)
par(mfrow=c(1,2))
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from Normal Distribution", freq = FALSE, main=sprintf("Histogram for Normal, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
SRS <- 1000
set <- c(1, 2, 6, 10)
for(i in set) {
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from Normal Distribution", freq = FALSE, main=sprintf("Histogram for Normal, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
# E
SRS <- 1000
set <- c(1, 5, 10, 20, 30, 40 ,50)
for(i in set) {
attach(mtcars)
par(mfrow=c(1,2))
n <- i
data.vec <- rexp(SRS*n,1/2) #creates the random data
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from exponential Distribution", freq = FALSE, main=sprintf("Histogram for exponential, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
# E
SRS <- 1000
set <- c(1, 5, 10, 20, 30, 40 ,50)
for(i in set) {
attach(mtcars)                  # two plots in line
par(mfrow=c(1,2))
n <- i
data.vec <- rexp(SRS*n,2) #creates the random data  # lambda
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from exponential Distribution", freq = FALSE, main=sprintf("Histogram for exponential, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
setwd("~/Desktop/Purdue/STAT350_R/STAT350/Labs/lab9")
job <- read.table(file = "loc.txt", header = TRUE)
attach(job)
library(lattice)
xyplot(STRESS ~ LOC,
data = job,
panel = function(x, y){
panel.xyplot(x, y)
panel.lmline(x, y)
})
cor(LOC, STRESS)
#c), d), i) calculate linear regression and get results > job.lm = lm(STRESS ~ LOC)
job.lm operation
> summary(job.lm)
#b) correlation
cor(LOC, STRESS)
#c), d), i) calculate linear regression and get results > job.lm = lm(STRESS ~ LOC)
job.lm operation
#c), d), i) calculate linear regression and get results
job.lm = lm(STRESS ~ LOC)
job.lm operation
cor(LOC, STRESS)
#c), d), i) calculate linear regression and get results
job.lm = lm(STRESS ~ LOC)
summary(job.lm)
#e) calculate the residuals
job.resid = job.lm$res #Extract residuals obtained in job.lm operation
xyplot(job.resid ~ LOC,
data = job,
main=”Residual plot”,
ylab = "Residual",
panel = function(x, y){
panel.xyplot(x, y)
panel.abline(h = 0)
# Note: this is a single sample
# Generate the 2-sided Confidence Interval (CI) for the parameters
#h)
confint(job.lm, level = 0.95)
#NOTE: This can also be done by hand from output of summary(job.lm) > # However, in this lab, you must use the code above.
job <- read.table(file = "loc.txt", header = TRUE)
attach(job)
#a)
library(lattice)
xyplot(STRESS ~ LOC,
data = job,
panel = function(x, y){
panel.xyplot(x, y)
panel.lmline(x, y)
})
#b) correlation
cor(LOC, STRESS)
#c), d), i) calculate linear regression and get results
job.lm = lm(STRESS ~ LOC)
summary(job.lm)
#e) calculate the residuals
job.resid = job.lm$res #Extract residuals obtained in job.lm operation
xyplot(job.resid ~ LOC,
data = job,
main=”Residual plot”,
ylab = "Residual",
panel = function(x, y){
panel.xyplot(x, y)
panel.abline(h = 0)
})
# f)
# Calculate the histogram and qqplot on the residuals please see previous labs for this
# Note: this is a single sample
# Generate the 2-sided Confidence Interval (CI) for the parameters
#h)
confint(job.lm, level = 0.95)
#NOTE: This can also be done by hand from output of summary(job.lm) > # However, in this lab, you must use the code above.
xyplot(job.resid ~ LOC,
data = job,
main=”Residual plot”,
ylab = "Residual",
xyplot(job.resid ~ LOC,
data = job,
main=”Residual plot”,
xyplot(job.resid ~ LOC,
data = job,
main="Residual plot",
ylab = "Residual",
panel = function(x, y){
panel.xyplot(x, y)
panel.abline(h = 0)
})
# f)
# Calculate the histogram and qqplot on the residuals please see previous labs for this
# Note: this is a single sample
# Generate the 2-sided Confidence Interval (CI) for the parameters
#h)
confint(job.lm, level = 0.95)
#NOTE: This can also be done by hand from output of summary(job.lm) > # However, in this lab, you must use the code above.
job <- read.table(file = "loc.txt", header = TRUE)
attach(job)
#a)
library(lattice)
xyplot(STRESS ~ LOC,
data = job,
panel = function(x, y){
panel.xyplot(x, y)
panel.lmline(x, y)
job <- read.table(file = "loc.txt", header = TRUE)
attach(job)
#a)
library(lattice)
xyplot(STRESS ~ LOC,
studynew <- subset(airline, ArrDelay <= 60)
attach(studynew)
studynew <- subset(airline, ArrDelay <= 60)
attach(studynew)
studynew <- subset(airline, ArrDelay <= 60)
airline <- read.table(file = "airline_cleaned.txt", header = TRUE)
attach(airline)
studynew <- subset(airline, ArrDelay <= 60)
attach(studynew)
airline <- read.table(file = "airline_cleaned.txt", header = TRUE)
studynew <- subset(airline, ArrDelay <= 60)
attach(studynew)
ArrDelay <- subset(airline, ArrDelay < 60 & (TaxiIn + TaxiOut) < 60 )
attach(studynew)
View(airline)
View(airline)
ArrDelay <- subset(airline, ArrDelay < 60 & (TaxiIn + TaxiOut) < 60 )
detach(airline)
attach(ArrDelay)
airline <- read.table(file = "airline_cleaned.txt", header = TRUE)
attach(airline)
ArrDelay <- subset(airline, ArrDelay < 60 & (TaxiIn + TaxiOut) < 60 )
detach(airline)
attach(ArrDelay)
airline <- read.table(file = "airline_cleaned.txt", header = TRUE)
attach(airline)
ArrDelay <- subset(airline, ArrDelay < 60 & (TaxiIn + TaxiOut) < 60 )
detach(airline)
detach(studynew)
attach(ArrDelay)
ArrDelay <- subset(airline, ArrDelay < 60 & (TaxiIn + TaxiOut) < 60 & Distance <= 2704 )
detach(airline)
detach(studynew)
attach(ArrDelay)
airline <- read.table(file = "airline_cleaned.txt", header = TRUE)
attach(airline)
ArrDelay <- subset(airline, ArrDelay < 60 & (TaxiIn + TaxiOut) < 60 & Distance <= 2704 )
detach(airline)
detach(studynew)
attach(ArrDelay)
#a)
library(lattice)
xyplot(STRESS ~ LOC,
data = job,
panel = function(x, y){
panel.xyplot(x, y)
panel.lmline(x, y)
})
#a)
library(lattice)
xyplot(localAirline$ActualElapsedTime ~ Distance,
data = localAirline,
panel = function(x, y){
panel.xyplot(x, y)
panel.lmline(x, y)
})
airline <- read.table(file = "airline_cleaned.txt", header = TRUE)
attach(airline)
localAirline <- subset(airline, ArrDelay < 60 & (TaxiIn + TaxiOut) < 60 & Distance <= 2704 )
detach(airline)
detach(studynew)
attach(ArrDelay)
#a)
library(lattice)
xyplot(localAirline$ActualElapsedTime ~ Distance,
data = localAirline,
panel = function(x, y){
panel.xyplot(x, y)
panel.lmline(x, y)
})
#b) correlation
cor(Distance, ActualElapsedTime)
#b) correlation
cor(Distance, ActualElapsedTime)
#c), d), i) calculate linear regression and get results
job.lm = lm(STRESS ~ LOC)
summary(job.lm)
#c), d), i) calculate linear regression and get results
local.lm = lm(localAirline$ActualElapsedTime ~ Distance)
summary(local.lm)
#h)
confint(local.lm, level = 0.99)
#e) calculate the residuals
local.resid = local.lm$res #Extract residuals obtained in job.lm operation
xyplot(job.resid ~ LOC,
data = job,
main="Residual plot",
ylab = "Residual",
panel = function(x, y){
panel.xyplot(x, y)
panel.abline(h = 0)
})
# f)
#7)
x <- subset(airline, Month = 11,	DayofMonth = 7, Origin = "MSP",	Dest = "MKE", DepTime	= 1529)
#7)
#7)
x <- subset(airline, Month = 11 &	DayofMonth = 7 & Origin = "MSP" &	Dest = "MKE" & DepTime	= 1529)
#7)
x <- subset(airline, Month == 11 &	DayofMonth == 7 & Origin == "MSP" &	Dest == "MKE" & DepTime	== 1529)
View(x)
x$Distance
x$Distance
x$ActualElapsedTime
local.resid = local.lm$res #Extract residuals obtained in job.lm operation
xyplot(local.resid ~ Distance,
data = local,
main="Residual plot",
ylab = "Residual",
panel = function(x, y){
panel.xyplot(x, y)
panel.abline(h = 0)
})
#8) calculate the residuals
local.resid = local.lm$res #Extract residuals obtained in job.lm operation
xyplot(local.resid ~ Distance,
data = local,
main="Residual plot",
ylab = "Residual",
panel = function(x, y){
panel.xyplot(x, y)
panel.abline(h = 0)
})
# f)
local.resid = local.lm$res #Extract residuals obtained in job.lm operation
xyplot(local.resid ~ Distance,
data = local.lm,
main="Residual plot",
ylab = "Residual",
panel = function(x, y){
panel.xyplot(x, y)
panel.abline(h = 0)
})
# f)
histogram(local.resid)
# Generate the 2-sided Confidence Interval (CI) for the parameters
histogram(local.resid, type="density",
panel=function(x,...)
{panel.histogram(x,...)
panel.mathdensity(dmath=dnorm,col="blue",lwd=2,
args=list(mean=mean(x, na.rm=T), sd = sd(x,na.rm=T)),...)
panel.densityplot(x,col="red",lwd=2,...)
})
#h)
})
qqmath(local.resid, data = local.resid, panel = function(x){
panel.qqmath(x)
panel.qqmathline(x)
})
#h)
confint(local.lm, level = 0.99)
})
qqmath(local.resid, panel = function(x){
panel.qqmath(x)
panel.qqmathline(x)
})
#h)
confint(local.lm, level = 0.99)
#NOTE: This can also be done by hand from output of summary(job.lm) > # However, in this lab, you must use the code above.
