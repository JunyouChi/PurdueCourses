curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
set <- c(1, 2, 6, 10)
for(i in set) {
attach(mtcars)
par(mfrow=c(1,2))
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from Normal Distribution", freq = FALSE, main=sprintf("Histogram for Normal, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
SRS <- 1000
set <- c(1, 2, 6, 10)
for(i in set) {
attach(mtcars)
par(mfrow=c(1,2))
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from Normal Distribution", freq = FALSE, main=sprintf("Histogram for Normal, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
SRS <- 1000
set <- c(1, 5, 10, 20, 30, 40 ,50)
for(i in set) {
attach(mtcars)
par(mfrow=c(1,2))
n <- i
data.vec <- rexp(SRS*n,2) #creates the random data
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from exponential Distribution", freq = FALSE, main=sprintf("Histogram for exponential, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
# E
SRS <- 1000
set <- c(1, 5, 10, 20, 30, 40 ,50)
for(i in set) {
attach(mtcars)
par(mfrow=c(1,2))
n <- i
data.vec <- rexp(SRS*n,1/2) #creates the random data
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from exponential Distribution", freq = FALSE, main=sprintf("Histogram for exponential, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
}
set <- c(1, 5, 10, 20, 30, 40 ,50)
for(i in set) {
attach(mtcars)
par(mfrow=c(1,2))
n <- i
data.vec <- rexp(SRS*n,1/2) #creates the random data
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from exponential Distribution", freq = FALSE, main=sprintf("Histogram for exponential, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
for(i in set) {
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from Normal Distribution", freq = FALSE, main=sprintf("Histogram for Normal, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
# E
SRS <- 1000
set <- c(1, 2, 6, 10)
for(i in set) {
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from Normal Distribution", freq = FALSE, main=sprintf("Histogram for Normal, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
set <- c(1, 2, 6, 10)
for(i in set) {
attach(mtcars)
par(mfrow=c(1,2))
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
for(i in set) {
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from Normal Distribution", freq = FALSE, main=sprintf("Histogram for Normal, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
# E
set <- c(1, 2, 6, 10)
for(i in set) {
attach(mtcars)
par(mfrow=c(1,2))
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from Normal Distribution", freq = FALSE, main=sprintf("Histogram for Normal, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
# E
SRS <- 1000
set <- c(1, 5, 10, 20, 30, 40 ,50)
for(i in set) {
attach(mtcars)
par(mfrow=c(1,2))
n <- i
data.vec <- rexp(SRS*n,1/2) #creates the random data
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from exponential Distribution", freq = FALSE, main=sprintf("Histogram for exponential, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
# A
SRS <- 1000
set <- c(1, 2, 6, 10)
for(i in set) {
attach(mtcars)
par(mfrow=c(1,2))
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from Normal Distribution", freq = FALSE, main=sprintf("Histogram for Normal, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
# A
SRS <- 1000
set <- c(1, 2, 6, 10)
for(i in set) {
attach(mtcars)
par(mfrow=c(1,2))
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from Normal Distribution", freq = FALSE, main=sprintf("Histogram for Normal, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
SRS <- 1000
set <- c(1, 2, 6, 10)
for(i in set) {
n <- i
data.vec <- rnorm(SRS*n,mean=0,sd=1)
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from Normal Distribution", freq = FALSE, main=sprintf("Histogram for Normal, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
# E
SRS <- 1000
set <- c(1, 5, 10, 20, 30, 40 ,50)
for(i in set) {
attach(mtcars)
par(mfrow=c(1,2))
n <- i
data.vec <- rexp(SRS*n,1/2) #creates the random data
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from exponential Distribution", freq = FALSE, main=sprintf("Histogram for exponential, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
# E
SRS <- 1000
set <- c(1, 5, 10, 20, 30, 40 ,50)
for(i in set) {
attach(mtcars)                  # two plots in line
par(mfrow=c(1,2))
n <- i
data.vec <- rexp(SRS*n,2) #creates the random data  # lambda
data.mat <- matrix(data.vec, ncol = n)
avg <- apply(data.mat, 1, mean)
m = mean(avg)
std = sd(avg)
# print(n, m, std)
str = sprintf("n = %d, mean = %f, std = %f, sample std = %f", n,m, std, std*sqrt(n))
print(str)
# windows()#this is optional
hist(avg, xlab="Data from exponential Distribution", freq = FALSE, main=sprintf("Histogram for exponential, n = %d",n))
curve(dnorm(x, mean=m, sd=std), col="blue", lwd=2, add=TRUE)
lines(density(avg, adjust=1),col = "red", lwd=2)
# windows()
# quartz()
qqnorm(avg,main=sprintf("Normal Quantile Plot for Normal, n = %d",n))
qqline(avg)
quartz()
}
studynew.new <- droplevels(studynew)
airline=read.table(file="airline_cleaned.txt",header=T)
airline=read.table(file="airline_cleaned.txt",header=T)
attach(airline)
setwd("~/")
setwd("~/Desktop/Purdue/STAT350_R/STAT350/Labs/Lab8")
airline=read.table(file="airline_cleaned.txt",header=T)
attach(airline)
airline$trans.TaxiIn=log(TaxiIn)
studynew <- subset(airline, UniqueCarrier =="UA" | UniqueCarrier =="AA"| UniqueCarrier =="NW")
# select=c(FlightNum,UniqueCarrier))
ua <- subset(airline, UniqueCarrier =="UA")
aa <- subset(airline, UniqueCarrier =="AA")
nw <- subset(airline, UniqueCarrier =="NW")
detach(airline)
attach(studynew)
library(lattice)
studynew.new <- droplevels(studynew)
# studynew.new <- droplevels(studynew)
Comp = studynew.new$trans.TaxiIn
Group = studynew.new$UniqueCarrier
# boxplot(log(studynew.new$TaxiIn) ~studynew.new$UniqueCarrier, studynew.new)
quartz()
trace<-rep(1, length(Group))
interaction.plot(Group,trace,Comp,fun=mean,legend=F)
quartz()
trace<-rep(1, length(Group))
interaction.plot(Group,trace,studynew.new$TaxiIn,fun=mean,legend=F)
print(tapply(Comp, Group, length))
print(tapply(Comp, Group, mean))
print(tapply(Comp, Group, sd))
histogram(~studynew.new$trans.TaxiIn | studynew.new$UniqueCarrier, layout=c(1,3),type="density",
panel=function(x,...)
{panel.histogram(x,...)
panel.mathdensity(dmath=dnorm,col="blue",lwd=2,
args=list(mean=mean(x, na.rm=T), sd = sd(x,na.rm=T)),...)
panel.densityplot(x,col="red",lwd=2,...)
})
bwplot(~studynew.new$trans.TaxiIn | studynew.new$UniqueCarrier, layout = c(1, 3), pch = "|") #Boxplots side-by-side
qqmath(~log(abs(studynew.new$TaxiIn)) | studynew.new$UniqueCarrier, data = studynew.new, panel = function(x){
panel.qqmath(x)
panel.qqmathline(x)
})
fit <- aov(Comp ~ Group, data=studynew.new)
summary(fit)
test.Tukey<-TukeyHSD(fit,conf.level=0.95)
test.Tukey
airline=read.table(file="airline_cleaned.txt",header=T)
attach(airline)
airline$trans.TaxiIn=log(TaxiIn)
airline=read.table(file="airline_cleaned.txt",header=T)
attach(airline)
airline$trans.TaxiIn=log(TaxiIn)
studynew <- subset(airline, UniqueCarrier =="UA" | UniqueCarrier =="AA"| UniqueCarrier =="NW")
# select=c(FlightNum,UniqueCarrier))
ua <- subset(airline, UniqueCarrier =="UA")
aa <- subset(airline, UniqueCarrier =="AA")
nw <- subset(airline, UniqueCarrier =="NW")
detach(airline)
attach(studynew)
library(lattice)
studynew.new <- droplevels(studynew)
# studynew.new <- droplevels(studynew)
Comp = studynew.new$trans.TaxiIn
Group = studynew.new$UniqueCarrier
# boxplot(log(studynew.new$TaxiIn) ~studynew.new$UniqueCarrier, studynew.new)
quartz()
library(lattice)
studynew.new <- droplevels(studynew)
# studynew.new <- droplevels(studynew)
Comp = studynew.new$trans.TaxiIn
Group = studynew.new$UniqueCarrier
# boxplot(log(studynew.new$TaxiIn) ~studynew.new$UniqueCarrier, studynew.new)
quartz()
trace<-rep(1, length(Group))
interaction.plot(Group,trace,Comp,fun=mean,legend=F)
quartz()
trace<-rep(1, length(Group))
interaction.plot(Group,trace,studynew.new$TaxiIn,fun=mean,legend=F)
print(tapply(Comp, Group, length))
print(tapply(Comp, Group, mean))
print(tapply(Comp, Group, sd))
detach(airline)
attach(studynew)
library(lattice)
studynew.new <- droplevels(studynew)
# studynew.new <- droplevels(studynew)
Comp = studynew.new$trans.TaxiIn
Group = studynew.new$UniqueCarrier
# boxplot(log(studynew.new$TaxiIn) ~studynew.new$UniqueCarrier, studynew.new)
quartz()
trace<-rep(1, length(Group))
interaction.plot(Group,trace,Comp,fun=mean,legend=F)
quartz()
trace<-rep(1, length(Group))
interaction.plot(Group,trace,studynew.new$TaxiIn,fun=mean,legend=F)
print(tapply(Comp, Group, length))
print(tapply(Comp, Group, mean))
print(tapply(Comp, Group, sd))
histogram(~studynew.new$trans.TaxiIn | studynew.new$UniqueCarrier, layout=c(1,3),type="density",
panel=function(x,...)
{panel.histogram(x,...)
args=list(mean=mean(x, na.rm=T), sd = sd(x,na.rm=T)),...)
})
panel.mathdensity(dmath=dnorm,col="blue",lwd=2,
panel.densityplot(x,col="red",lwd=2,...)
bwplot(~studynew.new$trans.TaxiIn | studynew.new$UniqueCarrier, layout = c(1, 3), pch = "|") #Boxplots side-by-side
panel.qqmath(x)
qqmath(~log(abs(studynew.new$TaxiIn)) | studynew.new$UniqueCarrier, data = studynew.new, panel = function(x){
panel.qqmathline(x)
})
fit <- aov(Comp ~ Group, data=studynew.new)
summary(fit)
test.Tukey<-TukeyHSD(fit,conf.level=0.95)
test.Tukey
trace<-rep(1, length(Group))
interaction.plot(Group,trace,studynew.new$TaxiIn,fun=mean,legend=F)
print(tapply(Comp, Group, length))
print(tapply(Comp, Group, mean))
print(tapply(Comp, Group, sd))
histogram(~studynew.new$trans.TaxiIn | studynew.new$UniqueCarrier, layout=c(1,3),type="density",
panel=function(x,...)
{panel.histogram(x,...)
panel.mathdensity(dmath=dnorm,col="blue",lwd=2,
args=list(mean=mean(x, na.rm=T), sd = sd(x,na.rm=T)),...)
panel.densityplot(x,col="red",lwd=2,...)
})
bwplot(~studynew.new$trans.TaxiIn | studynew.new$UniqueCarrier, layout = c(1, 3), pch = "|") #Boxplots side-by-side
qqmath(~log(abs(studynew.new$TaxiIn)) | studynew.new$UniqueCarrier, data = studynew.new, panel = function(x){
panel.qqmath(x)
panel.qqmathline(x)
})
fit <- aov(Comp ~ Group, data=studynew.new)
summary(fit)
test.Tukey<-TukeyHSD(fit,conf.level=0.95)
test.Tukey
panel.qqmath(x)
panel.qqmathline(x)
})
fit <- aov(Comp ~ Group, data=studynew.new)
summary(fit)
test.Tukey<-TukeyHSD(fit,conf.level=0.95)
test.Tukey
