" Lab 12

MODULE Lab12

TITLE 'Lab 12'

" Target CPLD is ispMACH LC4256ZE 144-pin TQFP (LC4256ZE-5TN144C)

LIBRARY 'lattice';

DECLARATIONS

" Internal Oscillator

osc_dis, osc_rst, osc_out, tmr_out node istype 'com';

" Use maximum possible internal divisor -> yields approx 4 Hz output frequency

XLAT_OSCTIMER(DYNOSCDIS, TIMERRES, OSCOUT, TIMEROUT, 1048576);

" Input pins from DIP switch
" DOWN - contact closure to ground - logic 0
" UP - open contact pulled high with resistor - logic 1

DIP0 pin 79;	"IO_K6
DIP1 pin 78;	"IO_K8
DIP2 pin 77;	"IO_K10
DIP3 pin 76;	"IO_K12
DIP4 pin 23;	"IO_E6
DIP5 pin 24;	"IO_E8
DIP6 pin 25;	"IO_E10
DIP7 pin 26;	"IO_E12

DIP = [DIP7, DIP6, DIP5, DIP4, DIP3, DIP2, DIP1, DIP0];

" SPDT toggle switches (can be used to create bounceless switches) 
" ACTIVE LOW (contact closure to ground, with pull-up)
!S1_NC pin 58;	"IO_I2   normally closed (down position)
!S1_NO pin 59;	"IO_I4   normally open (up position)
!S2_NC pin 60;	"IO_I6   normally closed (down position)
!S2_NO pin 61;	"IO_I8   normally open (up position)

" Top row of red LEDs

!LED0 pin 40 istype 'com';	"IO_G10  right-most
!LED1 pin 39 istype 'com';	"IO_G12
!LED2 pin 33 istype 'com';	"IO_F12
!LED3 pin 32 istype 'com'; 	"IO_F10
!LED4 pin 31 istype 'com';	"IO_F8
!LED5 pin 30 istype 'com';	"IO_F6
!LED6 pin 29 istype 'com';	"IO_F4
!LED7 pin 28 istype 'com';	"IO_F2   left-most

TOPRED = [LED7, LED6, LED5, LED4, LED3, LED2, LED1, LED0];

" Second row (from top) of red LEDs

!LED8 pin 139 istype 'com';	"IO_B4   right-most
!LED9 pin 138 istype 'com';	"IO_B2
!LED10 pin 135 istype 'com';	"IO_A12	
!LED11 pin 134 istype 'com';	"IO_A10
!LED12 pin 133 istype 'com';	"IO_A8
!LED13 pin 132 istype 'com';	"IO_A6
!LED14 pin 131 istype 'com';	"IO_A4
!LED15 pin 130 istype 'com';	"IO_A2   left-most

MIDRED = [LED15, LED14, LED13, LED12, LED11, LED10, LED9, LED8];

" 7-segment common-anode displays (active low outputs)
" Right-most display (DIS1)

!DIS1a pin 87 istype 'com';	"IO_L6
!DIS1b pin 86 istype 'com';	"IO_L8
!DIS1c pin 85 istype 'com';	"IO_L10
!DIS1d pin 84 istype 'com';	"IO_L12
!DIS1e pin 83 istype 'com';	"IO_L14
!DIS1f pin 81 istype 'com';	"IO_K2
!DIS1g pin 80 istype 'com';	"IO_K4

DIS1 = [DIS1a, DIS1b, DIS1c, DIS1d, DIS1e, DIS1f, DIS1g];

" Second-from-right display (DIS2)

!DIS2a pin 98 istype 'com';	"IO_M12
!DIS2b pin 97 istype 'com';	"IO_M10
!DIS2c pin 96 istype 'com';	"IO_M8
!DIS2d pin 95 istype 'com';	"IO_M6
!DIS2e pin 94 istype 'com';	"IO_M4
!DIS2f pin 93 istype 'com';	"IO_M2
!DIS2g pin 88 istype 'com';	"IO_L4

DIS2 = [DIS2a, DIS2b, DIS2c, DIS2d, DIS2e, DIS2f, DIS2g];

" Second-from-left display (DIS3)

!DIS3a pin 125 istype 'com';	"IO_P2
!DIS3b pin 124 istype 'com';	"IO_P4
!DIS3c pin 123 istype 'com';	"IO_P6
!DIS3d pin 122 istype 'com';  "IO_P8
!DIS3e pin 121 istype 'com';	"IO_P10
!DIS3f pin 120 istype 'com';	"IO_P12
!DIS3g pin 116 istype 'com';	"IO_O2

DIS3 = [DIS3a, DIS3b, DIS3c, DIS3d, DIS3e, DIS3f, DIS3g];

" Left-most display (DIS4)

!DIS4a pin 44 istype 'com';	"IO_G2
!DIS4b pin 48 istype 'com';	"IO_H12
!DIS4c pin 49 istype 'com';	"IO_H10
!DIS4d pin 50 istype 'com';	"IO_H8
!DIS4e pin 51 istype 'com';	"IO_H6
!DIS4f pin 52 istype 'com'; 	"IO_H4
!DIS4g pin 53 istype 'com';	"IO_H2

DIS4 = [DIS4a, DIS4b, DIS4c, DIS4d, DIS4e, DIS4f, DIS4g];

" Jumbo R-Y-G LEDs
!LED16 pin 140 istype 'com';	"IO_B6   RED
!LED17 pin 141 istype 'com';	"IO_B8   YELLOW
!LED18 pin 142 istype 'com';	"IO_B10  GREEN
!LED19 pin 143 istype 'com';	"IO_B12  (unpopulated)

" Bottom row of red LEDs

!LED20 pin 100 istype 'com';	"IO_N2   right-most
!LED21 pin 101 istype 'com';	"IO_N4
!LED22 pin 102 istype 'com';	"IO_N6
!LED23 pin 103 istype 'com';	"IO_N8
!LED24 pin 104 istype 'com';	"IO_N10
!LED25 pin 105 istype 'com';	"IO_N12
!LED26 pin 111 istype 'com';	"IO_O12
!LED27 pin 112 istype 'com';	"IO_O10  left-most

BOTRED = [LED27, LED26, LED25, LED24, LED23, LED22, LED21, LED20];

" Yellow LEDs next to toggle switches
!LED28 pin 63 istype 'com';	"IO_I12  right
!LED29 pin 62 istype 'com';	"IO_I10  left

" 7-segment alphanumeric display code declarations
blank = [0,0,0,0,0,0,0];  " blank (all off)
char0 = [1,1,1,1,1,1,0];  " 0
char1 = [0,1,1,0,0,0,0];  " 1
char2 = [1,1,0,1,1,0,1];  " 2
char3 = [1,1,1,1,0,0,1];  " 3
char4 = [0,1,1,0,0,1,1];  " 4
char5 = [1,0,1,1,0,1,1];  " 5
char6 = [1,0,1,1,1,1,1];  " 6
char7 = [1,1,1,0,0,0,0];  " 7
char8 = [1,1,1,1,1,1,1];  " 8
char9 = [1,1,1,1,0,1,1];  " 9
charA = [1,1,1,0,1,1,1];  " A
charB = [0,0,1,1,1,1,1];  " b
charC = [1,0,0,1,1,1,0];  " C
charD = [0,1,1,1,1,0,1];  " d
charE = [1,0,0,1,1,1,1];  " E
charF = [1,0,0,0,1,1,1];  " F
charG = [1,1,1,1,0,1,1];  " g
charH = [0,1,1,0,1,1,1];  " H
charI = [0,0,1,0,0,0,0];  " i
charJ = [0,1,1,1,0,0,0];  " J
charL = [0,0,0,1,1,1,0];  " L
charN = [0,0,1,0,1,0,1];  " n
charO = [0,0,1,1,1,0,1];  " o
charP = [1,1,0,0,1,1,1];  " P
charR = [0,0,0,0,1,0,1];  " r
charS = [1,0,1,1,0,1,1];  " S
charU = [0,1,1,1,1,1,0];  " U
charY = [0,1,1,1,0,1,1];  " y	

" User-defined variables follow

X0..X3,Y0..Y3,y0..y3,S0..S3 node;
X = [X0,X1,X2,X3];
Y = [Y0,Y1,Y2,Y3];
y = [y0,y1,y2,y3];

BFC,BFD node istype 'reg';
CF,NF,ZF,VF node;
MODE node;
cin node;



LF0..LF5 node istype 'reg';
LF = [LF0,LF1,LF2,LF3];

x = .x.;

sat0..sat3 node istype 'reg';
SAT = [sat3..sat0];

score0..score7 node istype 'reg';
add0..add7 node;
actsc0..actsc7 node;

EQ = ZF;
BIG = NF$VF;
SML = !EQ&!BIG;

"new add system
score = [score0..score7];
actsc = [actsc0..actsc7];
add = [add0..add7];



timdiv2 node istype 'reg_d,buffer';
timdiv4 node istype 'reg_d,buffer';

rgs0..rgs20 node;
nDIS4 = [rgs0..rgs6];
nDIS2 = [rgs7..rgs13];
nDIS1 = [rgs14..rgs20];

"another version
"G0..G3,P0..P3,C0..C3 node;
G0 = X0&y0;
G1 = X1&y1;
G2 = X2&y2;
G3 = X3&y3;
P0 = X0$y0;
P1 = X1$y1;
P2 = X2$y2;
P3 = X3$y3;
C0 = G0 # cin&P0;
C1 = G1 # C0&P1;
C2 = G2 # C1&P2;
C3 = G3 # C2&P3;

lft0..lft27 node istype 'reg';
LFT0 = [lft0..lft6];
LFT1 = [lft7..lft13];
LFT2 = [lft14..lft20];
LFT3 = [lft21..lft27];

nico,poi,gap node istype 'reg';
fg node;
stfg node;

"states
q0..q3 node istype 'reg';
qs = [q3,q2,q1,q0];
st0 = 0;
st1 = 1;
st2 = 2;
st3 = 3;
st4 = 4;
st5 = 5;
st6 = 6;
st7 = 7;
st8 = 8;
st9 = 9;
sta = 10;
stb = 11;
stc = 12;
std = 13;

" Note - these should all be declared as NODES (*not* PINS)


" ======================= START OF EQUATIONS SECTION =================================

EQUATIONS

" Internal oscillator setup (disable/enable and reset variables) and OSCTIMER instance

osc_dis = 0;
osc_rst = 0;

I1 OSCTIMER(osc_dis, osc_rst, osc_out, tmr_out);

" User-defined equations, clocked-operator tables, and/or state diagram definitions follow

BFC.CLK = 0;
BFC.D = 0;
BFC.AP = S1_NO;
BFC.AR = S1_NC;
BFD.CLK = 0;
BFD.D = 0;
BFD.AP = S2_NO;
BFD.AR = S2_NC;

timdiv2:=!timdiv2;
timdiv2.clk = tmr_out;
timdiv4:=!timdiv4;
timdiv4.clk = timdiv2;


"Step 1

"MODE = !BFD;  BY step 2
"[X0..X3] = [DIP4..DIP7];  BY step 34
"[Y0..Y3] = [DIP0..DIP3];  BY step 5
MODE = 1; 
[LED7,LED6,LED5,LED4] = [CF,NF,ZF,VF];
cin = MODE;
[LED0..LED3] = [S0..S3];



S0 = cin$P0;
S1 = C0$P1;
S2 = C1$P2;
S3 = C2$P3;

VF = C2$C3;
CF = C3$MODE;
NF = S3;
ZF = !(S0#S1#S2#S3);

"Step 2

LED18 = EQ & !DIP7;       "GREEN
LED17 = BIG & !DIP7;      "YELLOW
LED16 = SML & !DIP7;      "RED

"Step 3
LF.clk = BFC;
[LF4..LF5].clk = BFC;
LF.AR = BFD;
LF4.AR = BFD;
LF5.AP = BFD;
[X0..X3] = [LF0..LF3];
LF0 := (LF2$LF3)&!LF4 # LF5;
LF1 := LF0&!LF4;
LF2 := LF1&!LF4;
LF3 := LF2&!LF4;

[LED8..LED11] = [LF0..LF3]&!DIP7;

TRUTH_TABLE ([LF0,LF1,LF2,LF3,LF4,LF5]:>[LF4,LF5]);
[0,0,1,1,x,x]:>[1,0];	"0011 00 to 0001 10
[x,x,x,x,1,x]:>[0,1];   "0000 01 to 1000 01
[x,x,x,x,x,1]:>[0,0];   "1000 01 to 0100 00

"Step 4

EQUATIONS
[sat0..sat3].clk = BFC;
[sat1..sat3].AR = BFD;
sat0.AP = BFD;


stfg = (!sat0 & sat1 & !sat2 & sat3);

SAT := (SAT + 1)&!stfg # SAT&stfg;

TRUTH_TABLE ([sat3,sat2,sat1,sat0]->[nDIS4])
[0,0,0,1]->[char1];
[0,0,1,0]->[char2];
[0,0,1,1]->[char3];
[0,1,0,0]->[char4];
[0,1,0,1]->[char5];
[0,1,1,0]->[char6];
[0,1,1,1]->[char7];
[1,0,0,0]->[char8];
[1,0,0,1]->[char9];

"Step 5
TRUTH_TABLE([actsc0,actsc1,actsc2,actsc3]->[nDIS2])
[0,0,0,1]->[char1];
[0,0,1,0]->[char2];
[0,0,1,1]->[char3];
[0,1,0,0]->[char4];
[0,1,0,1]->[char5];
[0,1,1,0]->[char6];
[0,1,1,1]->[char7];
[1,0,0,0]->[char8];
[0,0,0,0]->[char0];

TRUTH_TABLE([actsc4,actsc5,actsc6,actsc7]->[nDIS1])
[0,0,0,1]->[char1];
[0,0,1,0]->[char2];
[0,0,1,1]->[char3];
[0,1,0,0]->[char4];
[0,1,0,1]->[char5];
[0,1,1,0]->[char6];
[0,1,1,1]->[char7];
[1,0,0,0]->[char8];
[1,0,0,1]->[char9];
[0,0,0,0]->[char0];



EQUATIONS

score.AR = BFD;
score.clk = BFC;
[y0..y3] = ![DIP0..DIP3];

"addsc + score
when ([sat3..sat0]==10) then add = 0;
else when (EQ == 1) then add = 9;          
else when (SML == 1) then add = 0;
else when (BIG == 1) then add = 4;

"[ept0..ept3] = 0;

score := score + add;

when (score > 79) then actsc = score + 48;
else when (score > 69) then actsc = score + 42;
else when (score > 59) then actsc = score + 36;
else when (score > 49) then actsc = score + 30;
else when (score > 39) then actsc = score + 24;
else when (score > 29) then actsc = score + 18;
else when (score > 19) then actsc = score + 12;
else when (score > 9) then actsc = score + 6;
else actsc = score;

"Step 6
LFT0.clk = timdiv4;
LFT1.clk = timdiv4;
LFT2.clk = timdiv4;
LFT3.clk = timdiv4;
LFT0.ar = BFD;
LFT1.ar = BFD;
LFT2.ar = BFD;
LFT3.ar = BFD;
LFT3 := LFT2;
LFT2 := LFT1;
LFT1 := LFT0;

fg = nico#poi;
DIS4 = LFT3&fg # !fg&nDIS4;
DIS3 = LFT2&fg;
DIS2 = LFT1&fg # !fg&nDIS2;
DIS1 = LFT0&fg # !fg&nDIS1;

[nico,poi,gap].AR = BFD;
[nico,poi].clk = BFC;
gap.clk = timdiv4;

when (SAT<9) then {nico:=0; poi:=0;}
else {
	when (score >= 50) then {nico := 1; poi:= 0;}
	else when(score < 50) then {nico := 0; poi := 1}
} 


when (qs!=st0) then{
	
		when (qs==st1) then LFT0:= blank;
		else when (qs==st2) then LFT0 := nDIS2;
		else when (qs==st3) then LFT0 := nDIS1;
		else when (qs==st4) then LFT0 := blank; 

	

		else when (qs==st5) then LFT0 := charY;
		else when (qs==st6) then LFT0 := charE;
		else when (qs==st7) then LFT0 := charA;
		else when (qs==st8) then LFT0 := charH;
		

		else when (qs==st9) then LFT0 := charL;
		else when (qs==sta) then LFT0 := charO;
		else when (qs==stb) then LFT0 := charS;
		else when (qs==stc) then LFT0 := charE;
		else when (qs==std) then LFT0 := charR;
	
	
}

qs.clk = timdiv4;
qs.ar = BFD;
state_diagram qs  "print win or lose state
state st0: if(fg==1) then st2
	else st0; 
state st1: goto  st2; "blank
state st2: goto  st3; "DIS2
state st3: goto  st4; "DIS1

state st4: if(nico==1) then st5 " win
	else if (poi==1) then st9; "lose
state st5: goto  st6;"Y
state st6: goto  st7;"E
state st7: goto  st8;"A
state st8: goto  st1;"H

state st9: goto  sta;"L
state sta: goto  stb;"O
state stb: goto  stc;"S
state stc: goto  std;"E
state std: goto  st1;"R

END

